#!/bin/bash

# Ki·ªÉm tra quy·ªÅn root
if [ "$EUID" -ne 0 ]; then
  echo "‚ùå Vui l√≤ng ch·∫°y script b·∫±ng quy·ªÅn root!"
  exit 1
fi

# Nh·∫≠p domain
read -p "Nh·∫≠p domain b·∫°n mu·ªën c√†i n8n (v√≠ d·ª•: n8n.tenmien.com): " DOMAIN
if [[ ! "$DOMAIN" =~ ^[a-zA-Z0-9.-]+$ || ! "$DOMAIN" =~ \. ]]; then
  echo "‚ùå Domain kh√¥ng h·ª£p l·ªá (ch·ªâ cho ph√©p ch·ªØ, s·ªë, d·∫•u g·∫°ch ngang v√† d·∫•u ch·∫•m)!"
  exit 1
fi

# C√†i dnsutils, git, curl, build-essential
echo "üîß C·∫≠p nh·∫≠t g√≥i v√† c√†i dnsutils, git, curl, build-essential..."
apt update || { echo "‚ùå L·ªói c·∫≠p nh·∫≠t apt"; exit 1; }
apt install -y dnsutils git curl build-essential nginx postgresql certbot python3-certbot-nginx || { echo "‚ùå L·ªói c√†i c√°c g√≥i c·∫ßn thi·∫øt"; exit 1; }

# Ki·ªÉm tra l·ªánh dig
if ! command -v dig &>/dev/null; then
  echo "‚ùå L·ªánh dig kh√¥ng c√≥ s·∫µn!"
  exit 1
fi

# Ki·ªÉm tra DNS tr·ªè ƒë·∫øn IP server
echo "üîç Ki·ªÉm tra DNS cho domain $DOMAIN..."
SERVER_IP=$(hostname -I | awk '{print $1}')
DOMAIN_IP=$(dig +short A "$DOMAIN" | head -n1)
echo "IP server: $SERVER_IP"
echo "IP domain: $DOMAIN_IP"
if [[ -z "$DOMAIN_IP" || "$DOMAIN_IP" != "$SERVER_IP" ]]; then
  echo "‚ùå Domain $DOMAIN ch∆∞a tr·ªè ƒë·∫øn IP server ($SERVER_IP). Vui l√≤ng ki·ªÉm tra DNS."
  exit 1
fi

# Th∆∞ m·ª•c c√†i ƒë·∫∑t
INSTALL_DIR="/home/n8n"

# Ki·ªÉm tra th∆∞ m·ª•c r·ªóng
if [[ -d "$INSTALL_DIR" && "$(ls -A "$INSTALL_DIR")" ]]; then
  echo "‚ùå Th∆∞ m·ª•c $INSTALL_DIR kh√¥ng r·ªóng!"
  exit 1
fi

echo "üëâ C√†i n8n v√†o: $INSTALL_DIR v·ªõi root"

# T·∫°o th∆∞ m·ª•c c√†i ƒë·∫∑t
mkdir -p "$INSTALL_DIR" || { echo "‚ùå L·ªói t·∫°o th∆∞ m·ª•c $INSTALL_DIR"; exit 1; }

# T·∫°o PostgreSQL database
echo "üóÉ T·∫°o database PostgreSQL..."
systemctl is-active --quiet postgresql || { echo "‚ùå PostgreSQL kh√¥ng ch·∫°y!"; exit 1; }
DB_NAME="n8ndb"
DB_USER="n8nuser"
DB_PASS="$(openssl rand -hex 16)"

cd /tmp || { echo "‚ùå Kh√¥ng th·ªÉ chuy·ªÉn th∆∞ m·ª•c l√†m vi·ªác sang /tmp"; exit 1; }

# T·∫°o user PostgreSQL n·∫øu ch∆∞a c√≥
if ! sudo -u postgres psql -q -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DB_USER'" | grep -q 1; then
  sudo -u postgres psql -q -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASS';" \
    || { echo "‚ùå L·ªói t·∫°o user PostgreSQL"; exit 1; }
fi

# T·∫°o database n·∫øu ch∆∞a c√≥
if ! sudo -u postgres psql -q -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME'" | grep -q 1; then
  sudo -u postgres psql -q -c "CREATE DATABASE $DB_NAME OWNER $DB_USER;" \
    || { echo "‚ùå L·ªói t·∫°o database PostgreSQL"; exit 1; }
fi

# C√†i nvm, Node.js 22, n8n v√† PM2
echo "‚¨áÔ∏è C√†i ƒë·∫∑t nvm, Node.js 22, n8n v√† PM2..."
export NVM_DIR="/root/.nvm"
git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
cd "$NVM_DIR" && git checkout v0.39.4
source "$NVM_DIR/nvm.sh"

# Th√™m nvm v√†o ~/.bashrc ƒë·ªÉ ch·∫°y t·ª± ƒë·ªông khi kh·ªüi ƒë·ªông
echo 'export NVM_DIR="/root/.nvm"' >> ~/.bashrc
echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.bashrc
source ~/.bashrc

# C√†i Node.js 22
nvm install 22
nvm alias default 22
echo "‚ö° Node.js version: $(node -v)"

# C√†i n8n
cd "$INSTALL_DIR"
npm init -y
npm install n8n || { echo "‚ùå L·ªói c√†i n8n"; exit 1; }

# T·∫°o .env
cat <<EOT > "$INSTALL_DIR/.env"
DB_TYPE=postgresdb
DB_POSTGRESDB_HOST=localhost
DB_POSTGRESDB_PORT=5432
DB_POSTGRESDB_DATABASE=$DB_NAME
DB_POSTGRESDB_USER=$DB_USER
DB_POSTGRESDB_PASSWORD=$DB_PASS
N8N_BASIC_AUTH_ACTIVE=false
N8N_HOST=$DOMAIN
N8N_PORT=5678
WEBHOOK_URL=https://$DOMAIN/
EOT

chmod 600 "$INSTALL_DIR/.env"

# C√†i PM2 v√† c·∫•u h√¨nh auto-start
npm install -g pm2 || { echo "‚ùå L·ªói c√†i PM2"; exit 1; }
pm2 start ./node_modules/n8n/bin/n8n --name n8n || { echo "‚ùå L·ªói kh·ªüi ƒë·ªông n8n v·ªõi PM2"; exit 1; }
pm2 startup systemd -u root --hp /root || { echo "‚ùå L·ªói c·∫•u h√¨nh PM2 startup"; exit 1; }
pm2 save || { echo "‚ùå L·ªói l∆∞u c·∫•u h√¨nh PM2"; exit 1; }

# C·∫•u h√¨nh Nginx
echo "üåê C·∫•u h√¨nh Nginx..."
cat <<EOT > /etc/nginx/sites-available/$DOMAIN
server {
    listen 80;
    server_name $DOMAIN;

    location / {
        proxy_pass http://localhost:5678;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
    }
}
EOT

ln -s /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/ || { echo "‚ùå L·ªói t·∫°o symlink nginx"; exit 1; }
nginx -t || { echo "‚ùå L·ªói c·∫•u h√¨nh nginx!"; exit 1; }
systemctl reload nginx || { echo "‚ùå L·ªói reload nginx"; exit 1; }

# C√†i SSL
echo "üîí ƒêang xin SSL cho $DOMAIN..."
certbot --nginx -d "$DOMAIN" --non-interactive --agree-tos -m "admin@$DOMAIN" \
  || { echo "‚ùå L·ªói c√†i SSL"; exit 1; }

# Ho√†n t·∫•t
echo "‚úÖ C√†i ƒë·∫∑t ho√†n t·∫•t!"
echo "‚û°Ô∏è Truy c·∫≠p: https://$DOMAIN"
echo "üìù L·∫ßn ƒë·∫ßu ti√™n, vui l√≤ng t·∫°o t√†i kho·∫£n admin v·ªõi email, t√™n v√† m·∫≠t kh·∫©u c·ªßa b·∫°n."
