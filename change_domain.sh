#!/bin/bash
# Script thay ƒë·ªïi domain n8n ƒë√£ c√†i

if [ "$EUID" -ne 0 ]; then
  echo "‚ùå Vui l√≤ng ch·∫°y script b·∫±ng quy·ªÅn root!"
  exit 1
fi

# M·ª•c th∆∞ m·ª•c c√†i ƒë·∫∑t n8n (ph·∫£i ƒë√∫ng v·ªõi script c√†i c·ªßa b·∫°n)
INSTALL_DIR="/home/n8n"

# ƒê·ªçc domain c≈© (domain hi·ªán ƒëang c√†i)
read -p "Nh·∫≠p domain c≈© (domain hi·ªán t·∫°i ƒëang d√πng cho n8n): " OLD_DOMAIN
if [[ ! "$OLD_DOMAIN" =~ ^[a-zA-Z0-9.-]+$ || ! "$OLD_DOMAIN" =~ \. ]]; then
  echo "‚ùå Domain c≈© kh√¥ng h·ª£p l·ªá!"
  exit 1
fi

if [ ! -f "$INSTALL_DIR/.env" ]; then
  echo "‚ùå Kh√¥ng t√¨m th·∫•y file .env trong $INSTALL_DIR. Vui l√≤ng ki·ªÉm tra l·∫°i."
  exit 1
fi

# ƒê·ªçc domain m·ªõi c·∫ßn ƒë·ªïi sang
read -p "Nh·∫≠p domain m·ªõi b·∫°n mu·ªën ƒë·ªïi sang: " NEW_DOMAIN
if [[ ! "$NEW_DOMAIN" =~ ^[a-zA-Z0-9.-]+$ || ! "$NEW_DOMAIN" =~ \. ]]; then
  echo "‚ùå Domain m·ªõi kh√¥ng h·ª£p l·ªá!"
  exit 1
fi

# L·∫•y IP server
SERVER_IP=$(hostname -I | awk '{print $1}')
# Ki·ªÉm tra domain m·ªõi ƒë√£ tr·ªè ƒë√∫ng IP ch∆∞a
echo "üîç Ki·ªÉm tra DNS tr·ªè domain m·ªõi..."
DOMAIN_IP=$(dig +short A "$NEW_DOMAIN" | head -n1)
echo "IP server: $SERVER_IP"
echo "IP domain m·ªõi: $DOMAIN_IP"

if [[ -z "$DOMAIN_IP" || "$DOMAIN_IP" != "$SERVER_IP" ]]; then
  echo "‚ùå Domain m·ªõi $NEW_DOMAIN ch∆∞a tr·ªè v·ªÅ IP server ($SERVER_IP). Vui l√≤ng ki·ªÉm tra DNS v√† th·ª≠ l·∫°i."
  exit 1
fi

# C·∫≠p nh·∫≠t .env (ƒë·ªïi N8N_HOST v√† WEBHOOK_URL)
if grep -q "^N8N_HOST=" "$INSTALL_DIR/.env"; then
  sed -i "s/^N8N_HOST=.*/N8N_HOST=$NEW_DOMAIN/" "$INSTALL_DIR/.env"
else
  echo "N8N_HOST=$NEW_DOMAIN" >> "$INSTALL_DIR/.env"
fi

if grep -q "^WEBHOOK_URL=" "$INSTALL_DIR/.env"; then
  sed -i "s#^WEBHOOK_URL=.*#WEBHOOK_URL=https://$NEW_DOMAIN/#" "$INSTALL_DIR/.env"
else
  echo "WEBHOOK_URL=https://$NEW_DOMAIN/" >> "$INSTALL_DIR/.env"
fi

chmod 600 "$INSTALL_DIR/.env"

# C·∫≠p nh·∫≠t c·∫•u h√¨nh nginx
NGINX_CONF="/etc/nginx/sites-available/$OLD_DOMAIN"
NEW_NGINX_CONF="/etc/nginx/sites-available/$NEW_DOMAIN"

if [ ! -f "$NGINX_CONF" ]; then
  echo "‚ùå Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh nginx t·∫°i $NGINX_CONF"
  exit 1
fi

# T·∫°o c·∫•u h√¨nh m·ªõi b·∫±ng c√°ch thay th·∫ø domain c≈© b·∫±ng domain m·ªõi
sed "s/$OLD_DOMAIN/$NEW_DOMAIN/g" "$NGINX_CONF" > "$NEW_NGINX_CONF"

# Ki·ªÉm tra file symlink c≈©, x√≥a symlink c≈©
if [ -L "/etc/nginx/sites-enabled/$OLD_DOMAIN" ]; then
  rm "/etc/nginx/sites-enabled/$OLD_DOMAIN"
fi

# T·∫°o symlink c·∫•u h√¨nh nginx m·ªõi
ln -sf "$NEW_NGINX_CONF" "/etc/nginx/sites-enabled/$NEW_DOMAIN"

# Ki·ªÉm tra c·∫•u h√¨nh nginx
nginx -t || { echo "‚ùå L·ªói c·∫•u h√¨nh nginx!"; exit 1; }

# Reload nginx
systemctl reload nginx || { echo "‚ùå L·ªói reload nginx"; exit 1; }

# Y√™u c·∫ßu c·∫•p SSL v·ªõi certbot (d√πng plugin nginx)
echo "üîí Xin c·∫•p SSL cho domain m·ªõi $NEW_DOMAIN..."
certbot --nginx -d "$NEW_DOMAIN" --non-interactive --agree-tos -m "admin@$NEW_DOMAIN" || {
  echo "‚ùå L·ªói c·∫•p SSL"
  exit 1
}

echo "‚úÖ ƒê√£ ƒë·ªïi domain t·ª´ $OLD_DOMAIN sang $NEW_DOMAIN th√†nh c√¥ng!"
echo "‚û°Ô∏è Truy c·∫≠p n8n: https://$NEW_DOMAIN"

# N·∫øu pm2 ƒëang ch·∫°y n8n, restart pm2 ƒë·ªÉ load l·∫°i .env m·ªõi
if command -v pm2 &>/dev/null; then
  pm2 restart n8n || echo "‚ö†Ô∏è Kh√¥ng th·ªÉ restart PM2. B·∫°n vui l√≤ng ki·ªÉm tra th·ªß c√¥ng."
else
  echo "‚ö†Ô∏è PM2 kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t ho·∫∑c kh√¥ng c√≥ n8n trong PM2."
fi
