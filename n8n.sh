#!/bin/bash

set -euo pipefail

# üëë Ki·ªÉm tra quy·ªÅn root
if [ "$EUID" -ne 0 ]; then
  echo "‚ùå Vui l√≤ng ch·∫°y script b·∫±ng quy·ªÅn root!"
  exit 1
fi

# üõ† C√†i c√°c g√≥i c·∫ßn thi·∫øt
echo "üîÑ C·∫≠p nh·∫≠t h·ªá th·ªëng v√† c√†i ƒë·∫∑t c√°c g√≥i c·∫ßn thi·∫øt..."
apt update -y
apt upgrade -y
apt install -y dnsutils git curl build-essential nginx postgresql certbot python3-certbot-nginx sudo

# üåü T·∫°o user n8n n·∫øu ch∆∞a t·ªìn t·∫°i
if id "n8n" &>/dev/null; then
  echo "üë§ User n8n ƒë√£ t·ªìn t·∫°i. B·ªè qua t·∫°o user."
else
  echo "üë§ T·∫°o user n8n kh√¥ng c√≥ quy·ªÅn sudo..."
  useradd -m -s /bin/bash n8n
  # Thi·∫øt l·∫≠p th∆∞ m·ª•c home n8n
  mkdir -p /home/n8n
  chown n8n:n8n /home/n8n
fi

# üè† ƒê·∫∑t bi·∫øn HOME cho user n8n
N8N_HOME="/home/n8n"

# üì• C√†i nvm, Node.js 22, npm, n8n v√† pm2 d∆∞·ªõi user n8n
echo "‚¨áÔ∏è C√†i ƒë·∫∑t nvm, Node.js 22, n8n v√† PM2 d∆∞·ªõi user n8n..."

run_as_n8n() {
  sudo -i -u n8n bash -c "$1"
}

# C√†i nvm n·∫øu ch∆∞a c√≥
if [ ! -d "$N8N_HOME/.nvm" ]; then
  echo "üì¶ ƒêang c√†i ƒë·∫∑t nvm cho user n8n..."
  run_as_n8n "git clone https://github.com/nvm-sh/nvm.git ~/.nvm && cd ~/.nvm && git checkout v0.39.4"
  # Th√™m v√†o profile
  echo 'export NVM_DIR="$HOME/.nvm"' >> "$N8N_HOME/.bashrc"
  echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> "$N8N_HOME/.bashrc"
fi

# C√†i node 22 v√† npm, n8n, pm2, t·∫•t c·∫£ d∆∞·ªõi user n8n
run_as_n8n() {
  sudo -i -u n8n bash - <<'EOF'
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

nvm install 22
nvm alias default 22

npm install -g npm@latest

cd ~

if [ ! -f package.json ]; then
  npm init -y
fi

npm install n8n@latest
npm install -g pm2@latest

pm2 startup systemd -u n8n --hp /home/n8n
EOF
}

# üóÉ T·∫°o database v√† user PostgreSQL
echo "üóÉ T·∫°o database v√† user PostgreSQL cho n8n..."
DB_NAME="n8ndb"
DB_USER="n8nuser"
if ! sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME'" | grep -q 1; then
  DB_PASS=$(openssl rand -hex 16)
  echo "üîë M·∫≠t kh·∫©u database PostgreSQL ƒë∆∞·ª£c t·∫°o: $DB_PASS"
  
  if ! sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DB_USER'" | grep -q 1; then
    sudo -u postgres psql -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASS';"
  fi
  sudo -u postgres psql -c "CREATE DATABASE $DB_NAME OWNER $DB_USER;"
else
  echo "‚úÖ Database $DB_NAME ƒë√£ t·ªìn t·∫°i. B·ªè qua t·∫°o m·ªõi."
  DB_PASS="(vui l√≤ng l·∫•y m·∫≠t kh·∫©u user $DB_USER b·∫°n ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥)"
fi

# üåê Nh·∫≠p domain
read -rp "Nh·∫≠p domain b·∫°n mu·ªën c√†i n8n (v√≠ d·ª•: n8n.tenmien.com): " DOMAIN

# Validate domain ƒë∆°n gi·∫£n
if [[ ! "$DOMAIN" =~ ^[a-zA-Z0-9.-]+$ ]] || [[ "$DOMAIN" != *.* ]]; then
  echo "‚ùå Domain kh√¥ng h·ª£p l·ªá!"
  exit 1
fi

# ‚úÖ Ki·ªÉm tra IP domain (cho ph√©p IP tr√πng server ho·∫∑c 127.0.0.1)
echo "üîç Ki·ªÉm tra DNS cho domain $DOMAIN..."
SERVER_IP=$(hostname -I | awk '{print $1}')
DOMAIN_IP=$(dig +short A "$DOMAIN" | head -n1)
echo "IP server: $SERVER_IP"
echo "IP domain: $DOMAIN_IP"

if [[ -z "$DOMAIN_IP" ]]; then
  echo "‚ùå Domain $DOMAIN kh√¥ng c√≥ b·∫£n ghi A. Vui l√≤ng ki·ªÉm tra DNS."
  exit 1
fi

if [[ "$DOMAIN_IP" == "$SERVER_IP" ]]; then
  echo "‚úÖ Domain tr·ªè ƒë√∫ng v·ªÅ IP server."
elif [[ "$DOMAIN_IP" == "127.0.1.1" ]]; then
  echo "‚ö†Ô∏è Domain tr·ªè v·ªÅ localhost (127.0.1.1). Ti·∫øp t·ª•c c√†i ƒë·∫∑t..."
else
  echo "‚ùå Domain $DOMAIN tr·ªè t·ªõi IP $DOMAIN_IP, kh√¥ng tr√πng IP server ($SERVER_IP) ho·∫∑c localhost. Vui l√≤ng ki·ªÉm tra DNS."
  exit 1
fi

# ‚Ä¢ Thi·∫øt l·∫≠p th∆∞ m·ª•c c√†i ƒë·∫∑t n8n
echo "üóÇ Chu·∫©n b·ªã th∆∞ m·ª•c c√†i ƒë·∫∑t n8n ·ªü $N8N_HOME..."
mkdir -p "$N8N_HOME"
chown n8n:n8n "$N8N_HOME"

# T·∫°o file .env d∆∞·ªõi user n8n
cat > "$N8N_HOME/.env" <<EOT
DB_TYPE=postgresdb
DB_POSTGRESDB_HOST=localhost
DB_POSTGRESDB_PORT=5432
DB_POSTGRESDB_DATABASE=$DB_NAME
DB_POSTGRESDB_USER=$DB_USER
DB_POSTGRESDB_PASSWORD=$DB_PASS
N8N_BASIC_AUTH_ACTIVE=false
N8N_HOST=$DOMAIN
N8N_PORT=5678
WEBHOOK_URL=https://$DOMAIN/
EOT

chown n8n:n8n "$N8N_HOME/.env"
chmod 600 "$N8N_HOME/.env"

# üñ• Kh·ªüi ch·∫°y n8n v·ªõi pm2, user n8n
echo "üöÄ Kh·ªüi ƒë·ªông n8n v·ªõi PM2 d∆∞·ªõi user n8n..."
run_as_n8n "
  export NVM_DIR=\"\$HOME/.nvm\"
  source \"\$NVM_DIR/nvm.sh\"
  cd ~
  pm2 start ./node_modules/n8n/bin/n8n --name n8n || pm2 restart n8n
  pm2 save
"

systemctl daemon-reload

# üåê C·∫•u h√¨nh Nginx proxy
echo "üåê C·∫•u h√¨nh Nginx cho $DOMAIN..."
NGINX_CONF="/etc/nginx/sites-available/$DOMAIN"

cat > "$NGINX_CONF" <<EOT
server {
    listen 80;
    server_name $DOMAIN;

    location / {
        proxy_pass http://localhost:5678;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
    }
}
EOT

ln -sf "$NGINX_CONF" /etc/nginx/sites-enabled/

nginx -t

systemctl reload nginx

# üõ° C√†i SSL v·ªõi Certbot
echo "üîí Xin v√† c√†i SSL cho $DOMAIN..."
certbot --nginx -d "$DOMAIN" --non-interactive --agree-tos -m "admin@$DOMAIN" || {
  echo "‚ùå L·ªói khi c√†i SSL"
  exit 1
}

echo "‚úÖ C√†i ƒë·∫∑t n8n ho√†n t·∫•t!"
echo "‚û°Ô∏è Truy c·∫≠p https://$DOMAIN"
echo "üìù (N·∫øu b·∫≠t Basic Auth, h√£y c√†i ƒë·∫∑t trong file .env ho·∫∑c th√∫c ƒë·∫©y b·∫£o m·∫≠t kh√°c.)"

exit 0
